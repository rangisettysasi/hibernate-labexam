Step 1: Setup Maven Project
Create a Maven project in your preferred IDE.
Update pom.xml to include dependencies for Hibernate, MySQL (or your database), and any other required libraries.
xml
Copy code
<dependencies>
    <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-core</artifactId>
        <version>5.6.15.Final</version>
    </dependency>
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>8.0.33</version>
    </dependency>
    <dependency>
        <groupId>javax.persistence</groupId>
        <artifactId>javax.persistence-api</artifactId>
        <version>2.2</version>
    </dependency>
</dependencies>
Step 2: Configure hibernate.cfg.xml
Create a Hibernate configuration file in the src/main/resources directory.

xml
Copy code
<hibernate-configuration>
    <session-factory>
        <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
        <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/labexam</property>
        <property name="hibernate.connection.username">root</property>
        <property name="hibernate.connection.password">yourpassword</property>
        <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
        <property name="hibernate.show_sql">true</property>
        <property name="hibernate.hbm2ddl.auto">update</property>

        <mapping class="com.klef.jfsd.exam.Customer" />
    </session-factory>
</hibernate-configuration>
Step 3: Create the Customer Entity Class
Create the entity class Customer in the package com.klef.jfsd.exam.

java
Copy code
package com.klef.jfsd.exam;

import javax.persistence.*;

@Entity
@Table(name = "customer")
public class Customer {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    @Column(nullable = false)
    private String name;

    @Column(nullable = false, unique = true)
    private String email;

    @Column(nullable = false)
    private int age;

    @Column(nullable = false)
    private String location;

    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public int getAge() { return age; }
    public void setAge(int age) { this.age = age; }

    public String getLocation() { return location; }
    public void setLocation(String location) { this.location = location; }
}
Step 4: Create the ClientDemo Class
Create the ClientDemo class in the same package to implement the required operations.

java
Copy code
package com.klef.jfsd.exam;

import org.hibernate.*;
import org.hibernate.cfg.Configuration;
import org.hibernate.criterion.*;

import java.util.List;

public class ClientDemo {
    public static void main(String[] args) {
        SessionFactory factory = new Configuration().configure().buildSessionFactory();
        Session session = factory.openSession();
        Transaction transaction = session.beginTransaction();

        // Insert Records
        Customer customer1 = new Customer();
        customer1.setName("Alice");
        customer1.setEmail("alice@example.com");
        customer1.setAge(25);
        customer1.setLocation("New York");

        Customer customer2 = new Customer();
        customer2.setName("Bob");
        customer2.setEmail("bob@example.com");
        customer2.setAge(30);
        customer2.setLocation("Los Angeles");

        session.save(customer1);
        session.save(customer2);
        transaction.commit();

        // Criteria Query - Examples
        Criteria criteria = session.createCriteria(Customer.class);

        // Restriction: Equal
        criteria.add(Restrictions.eq("location", "New York"));
        List<Customer> equalResults = criteria.list();
        System.out.println("Customers in New York: " + equalResults);

        // Restriction: Greater Than
        criteria = session.createCriteria(Customer.class);
        criteria.add(Restrictions.gt("age", 25));
        List<Customer> greaterThanResults = criteria.list();
        System.out.println("Customers older than 25: " + greaterThanResults);

        // Restriction: Like
        criteria = session.createCriteria(Customer.class);
        criteria.add(Restrictions.like("name", "A%"));
        List<Customer> likeResults = criteria.list();
        System.out.println("Customers with names starting with 'A': " + likeResults);

        session.close();
        factory.close();
    }
}
Step 5: Execute and Verify
Run the ClientDemo class.
Verify that records are inserted into the database.
Confirm that queries with restrictions return the expected results.
Additional Notes
Ensure the database labexam is created and properly connected.
Replace yourpassword with your MySQL password.
Document the code and push it to a GitHub repository for submission.










ChatGPT can make mistakes. Check important info.